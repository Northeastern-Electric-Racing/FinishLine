// This file is part of NER's FinishLine and licensed under GNU AGPLv3.
// See the LICENSE file in the repository root folder for details.

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum CR_Type {
  ISSUE
  DEFINITION_CHANGE
  OTHER
  STAGE_GATE
  ACTIVATION
}

enum Task_Priority {
  LOW
  MEDIUM
  HIGH
}

enum Task_Status {
  IN_BACKLOG
  IN_PROGRESS
  DONE
}

enum WBS_Element_Status {
  INACTIVE
  ACTIVE
  COMPLETE
}

enum Role {
  APP_ADMIN
  ADMIN
  HEAD
  LEADERSHIP
  MEMBER
  GUEST
}

enum Theme {
  LIGHT
  DARK
}

enum Scope_CR_Why_Type {
  ESTIMATION
  SCHOOL
  DESIGN
  MANUFACTURING
  RULES
  INITIALIZATION
  COMPETITION
  MAINTENANCE
  OTHER_PROJECT
  OTHER
}

enum Work_Package_Stage {
  RESEARCH
  DESIGN
  MANUFACTURING
  INTEGRATION
}

model User {
  userId             Int                   @id @default(autoincrement())
  firstName          String
  lastName           String
  googleAuthId       String                @unique
  email              String                @unique
  emailId            String?               @unique
  role               Role                  @default(GUEST)
  userSettings       User_Settings?
  userSecureSettings User_Secure_Settings?

  // Relation references
  submittedChangeRequests   Change_Request[]        @relation(name: "submittedChangeRequests")
  reviewedChangeRequests    Change_Request[]        @relation(name: "reviewedChangeRequests")
  deletedChangeRequests     Change_Request[]        @relation(name: "deletedChangeRequests")
  markedAsProjectLead       Activation_CR[]         @relation(name: "markAsProjectLead")
  markedAsProjectManager    Activation_CR[]         @relation(name: "markAsProjectManager")
  changes                   Change[]
  projectLead               WBS_Element[]           @relation(name: "projectLead")
  projectManager            WBS_Element[]           @relation(name: "projectManager")
  Session                   Session[]
  teams                     Team[]                  @relation(name: "teamsAsMember")
  teamAsLead                Team?                   @relation(name: "teamAsLead")
  deletedWBSElements        WBS_Element[]           @relation(name: "deletedWbsElements")
  checkedDescriptionBullets Description_Bullet[]    @relation(name: "checkDescriptionBullets")
  createdProposedSolutions  Proposed_Solution[]
  createdTasks              Task[]                  @relation(name: "createdBy")
  deletedTasks              Task[]                  @relation(name: "deletedBy")
  assignedTasks             Task[]                  @relation(name: "assignedTo")
  favoriteProjects          Project[]               @relation(name: "favoritedBy")
  reimbursementRequests     Reimbursement_Request[] @relation(name: "reimbursementRequestRecipient")
  reimbursementStatuses     Reimbursement_Status[]
  reimbursements            Reimbursement[]         @relation(name: "purchaser")
  submittedReimbursements   Reimbursement[]         @relation(name: "submitter")
}

model Team {
  teamId      String    @id @default(uuid())
  teamName    String
  slackId     String
  description String    @default("")
  leaderId    Int       @unique
  leader      User      @relation(name: "teamAsLead", fields: [leaderId], references: [userId])
  projects    Project[]
  members     User[]    @relation(name: "teamsAsMember")
}

model Session {
  sessionId  Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [userId])
  created    DateTime @default(now())
  deviceInfo String?
}

model User_Settings {
  id           String @id @default(uuid())
  userId       Int    @unique
  user         User   @relation(fields: [userId], references: [userId])
  defaultTheme Theme  @default(DARK)
  slackId      String @default("")
}

model Change_Request {
  crId                    Int            @id @default(autoincrement())
  submitterId             Int
  submitter               User           @relation(name: "submittedChangeRequests", fields: [submitterId], references: [userId])
  dateSubmitted           DateTime       @default(now())
  dateDeleted             DateTime?
  wbsElementId            Int
  wbsElement              WBS_Element    @relation(fields: [wbsElementId], references: [wbsElementId])
  type                    CR_Type
  reviewerId              Int?
  reviewer                User?          @relation(name: "reviewedChangeRequests", fields: [reviewerId], references: [userId])
  deletedByUserId         Int?
  deletedBy               User?          @relation(name: "deletedChangeRequests", fields: [deletedByUserId], references: [userId])
  dateReviewed            DateTime?
  accepted                Boolean?
  reviewNotes             String?
  changes                 Change[]
  scopeChangeRequest      Scope_CR?
  stageGateChangeRequest  Stage_Gate_CR?
  activationChangeRequest Activation_CR?
}

model Scope_CR {
  scopeCrId         Int                 @id @default(autoincrement())
  changeRequestId   Int                 @unique
  changeRequest     Change_Request      @relation(fields: [changeRequestId], references: [crId])
  what              String
  why               Scope_CR_Why[]
  scopeImpact       String
  timelineImpact    Int
  budgetImpact      Int
  proposedSolutions Proposed_Solution[]
}

model Proposed_Solution {
  proposedSolutionId String   @id @default(uuid())
  description        String
  timelineImpact     Int
  budgetImpact       Int
  scopeImpact        String
  changeRequest      Scope_CR @relation(fields: [changeRequestId], references: [scopeCrId])
  changeRequestId    Int
  createdByUserId    Int
  createdBy          User     @relation(fields: [createdByUserId], references: [userId])
  dateCreated        DateTime @default(now())
  approved           Boolean  @default(false)
}

model Scope_CR_Why {
  scopeCrWhyId Int               @id @default(autoincrement())
  scopeCrId    Int
  scopeCr      Scope_CR          @relation(fields: [scopeCrId], references: [scopeCrId])
  type         Scope_CR_Why_Type
  explain      String
}

model Stage_Gate_CR {
  stageGateCrId   Int            @id @default(autoincrement())
  changeRequestId Int            @unique
  changeRequest   Change_Request @relation(fields: [changeRequestId], references: [crId])
  leftoverBudget  Int
  confirmDone     Boolean
}

model Activation_CR {
  activationCrId   Int            @id @default(autoincrement())
  changeRequestId  Int            @unique
  changeRequest    Change_Request @relation(fields: [changeRequestId], references: [crId])
  projectLeadId    Int
  projectLead      User           @relation(name: "markAsProjectLead", fields: [projectLeadId], references: [userId])
  projectManagerId Int
  projectManager   User           @relation(name: "markAsProjectManager", fields: [projectManagerId], references: [userId])
  startDate        DateTime
  confirmDetails   Boolean
}

model Change {
  changeId        Int            @id @default(autoincrement())
  changeRequestId Int
  changeRequest   Change_Request @relation(fields: [changeRequestId], references: [crId])
  dateImplemented DateTime       @default(now())
  implementerId   Int
  implementer     User           @relation(fields: [implementerId], references: [userId])
  wbsElementId    Int
  wbsElement      WBS_Element    @relation(fields: [wbsElementId], references: [wbsElementId])
  detail          String
}

model WBS_Element {
  wbsElementId          Int                     @id @default(autoincrement())
  dateCreated           DateTime                @default(now())
  dateDeleted           DateTime?
  carNumber             Int
  projectNumber         Int
  workPackageNumber     Int
  name                  String
  status                WBS_Element_Status      @default(INACTIVE)
  projectLeadId         Int?
  projectLead           User?                   @relation(name: "projectLead", fields: [projectLeadId], references: [userId])
  projectManagerId      Int?
  projectManager        User?                   @relation(name: "projectManager", fields: [projectManagerId], references: [userId])
  changeRequests        Change_Request[]
  changes               Change[]
  deletedByUserId       Int?
  deletedBy             User?                   @relation(name: "deletedWbsElements", fields: [deletedByUserId], references: [userId])
  project               Project?
  workPackage           Work_Package?
  blocking              Work_Package[]          @relation("blockedBy")
  tasks                 Task[]
  reimbursementProducts Reimbursement_Product[]

  @@unique([carNumber, projectNumber, workPackageNumber], name: "wbsNumber")
}

model Project {
  projectId             Int                  @id @default(autoincrement())
  wbsElementId          Int                  @unique
  wbsElement            WBS_Element          @relation(fields: [wbsElementId], references: [wbsElementId])
  budget                Int                  @default(0)
  summary               String
  googleDriveFolderLink String?
  slideDeckLink         String?
  bomLink               String?
  taskListLink          String?
  rules                 String[]
  goals                 Description_Bullet[] @relation(name: "projectGoals")
  features              Description_Bullet[] @relation(name: "projectFeatures")
  otherConstraints      Description_Bullet[] @relation(name: "projectOtherConstraints")
  workPackages          Work_Package[]
  teamId                String?
  team                  Team?                @relation(fields: [teamId], references: [teamId])
  favoritedBy           User[]               @relation(name: "favoritedBy")
}

model Work_Package {
  workPackageId      Int                  @id @default(autoincrement())
  wbsElementId       Int                  @unique
  wbsElement         WBS_Element          @relation(fields: [wbsElementId], references: [wbsElementId])
  projectId          Int
  project            Project              @relation(fields: [projectId], references: [projectId])
  orderInProject     Int
  startDate          DateTime
  duration           Int
  blockedBy          WBS_Element[]        @relation(name: "blockedBy")
  expectedActivities Description_Bullet[] @relation(name: "workPackageExpectedActivities")
  deliverables       Description_Bullet[] @relation(name: "workPackageDeliverables")
  stage              Work_Package_Stage?
}

model Description_Bullet {
  descriptionId                   Int           @id @default(autoincrement())
  dateAdded                       DateTime      @default(now())
  userCheckedId                   Int?
  userChecked                     User?         @relation(name: "checkDescriptionBullets", fields: [userCheckedId], references: [userId])
  dateTimeChecked                 DateTime?
  dateDeleted                     DateTime?
  detail                          String
  // Relation references
  projectIdGoals                  Int?
  projectGoals                    Project?      @relation(name: "projectGoals", fields: [projectIdGoals], references: [projectId])
  projectIdFeatures               Int?
  projectFeatures                 Project?      @relation(name: "projectFeatures", fields: [projectIdFeatures], references: [projectId])
  projectIdOtherConstraints       Int?
  projectOtherConstraints         Project?      @relation(name: "projectOtherConstraints", fields: [projectIdOtherConstraints], references: [projectId])
  workPackageIdExpectedActivities Int?
  workPackageExpectedActivities   Work_Package? @relation(name: "workPackageExpectedActivities", fields: [workPackageIdExpectedActivities], references: [workPackageId])
  workPackageIdDeliverables       Int?
  workPackageDeliverables         Work_Package? @relation(name: "workPackageDeliverables", fields: [workPackageIdDeliverables], references: [workPackageId])
}

model Task {
  taskId          String        @id @default(uuid())
  title           String
  notes           String
  deadline        DateTime
  assignees       User[]        @relation(name: "assignedTo")
  priority        Task_Priority
  status          Task_Status
  deletedBy       User?         @relation(name: "deletedBy", fields: [deletedByUserId], references: [userId])
  deletedByUserId Int?
  dateDeleted     DateTime?
  createdBy       User          @relation(name: "createdBy", fields: [createdByUserId], references: [userId])
  createdByUserId Int
  dateCreated     DateTime      @default(now())
  wbsElement      WBS_Element   @relation(fields: [wbsElementId], references: [wbsElementId])
  wbsElementId    Int
}

enum Club_Accounts {
  CASH
  BUDGET
}

enum Reimbursement_Status_Type {
  PENDING_FINANCE
  SABO_SUBMITTED
  ADVISOR_APPROVED
  REIMBURSED
}

model Reimbursement_Status {
  reimbursementStatusId  Int                       @id @default(autoincrement())
  type                   Reimbursement_Status_Type
  userId                 Int
  user                   User                      @relation(fields: [userId], references: [userId])
  dateCreated            DateTime                  @default(now())
  reimbursementRequestId String
  reimbursementRequest   Reimbursement_Request     @relation(fields: [reimbursementRequestId], references: [reimbursementRequestId])
}

model Reimbursement_Request {
  reimbursementRequestId String                  @id @default(uuid())
  saboId                 Int?                    @unique
  dateCreated            DateTime                @default(now())
  dateDeleted            DateTime?
  dateOfExpense          DateTime
  reimbursementStatuses  Reimbursement_Status[]
  recipientId            Int
  recipient              User                    @relation(name: "reimbursementRequestRecipient", fields: [recipientId], references: [userId])
  vendorId               String
  vendor                 Vendor                  @relation(fields: [vendorId], references: [vendorId])
  account                Club_Accounts
  totalCost              Int
  receiptPictures        String[]
  reimbursementProducts  Reimbursement_Product[]
  dateDelivered          DateTime?
  expenseTypeId          String
  expenseType            Expense_Type            @relation(fields: [expenseTypeId], references: [expenseTypeId])
}

model Reimbursement_Product {
  reimbursementProductId String                @id @default(uuid())
  name                   String
  dateDeleted            DateTime?
  cost                   Int
  wbsElementId           Int
  wbsElement             WBS_Element           @relation(fields: [wbsElementId], references: [wbsElementId])
  reimbursementRequestId String
  reimbursementRequest   Reimbursement_Request @relation(fields: [reimbursementRequestId], references: [reimbursementRequestId])
}

model Vendor {
  vendorId    String                  @id @default(uuid())
  dateCreated DateTime                @default(now())
  name        String                  @unique
  requests    Reimbursement_Request[]
}

model Expense_Type {
  expenseTypeId String                  @id @default(uuid())
  name          String
  code          Int
  allowed       Boolean
  requests      Reimbursement_Request[]
}

model Reimbursement {
  reimbursementId String   @id @default(uuid())
  dateCreated     DateTime @default(now())
  amount          Int
  userSubmittedId Int
  userSubmitted   User     @relation(fields: [userSubmittedId], references: [userId], name: "submitter")
  purchaserId     Int
  purchaser       User     @relation(fields: [purchaserId], references: [userId], name: "purchaser")
}

model User_Secure_Settings {
  userSecureSettingsId String @id @default(uuid())
  nuid                 String @unique
  userId               Int    @unique
  user                 User   @relation(fields: [userId], references: [userId])
  street               String
  city                 String
  state                String
  zipcode              String
  phoneNumber          String @unique
}
