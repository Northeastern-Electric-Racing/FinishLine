// This file is part of NER's FinishLine and licensed under GNU AGPLv3.
// See the LICENSE file in the repository root folder for details.

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum CR_Type {
  ISSUE
  DEFINITION_CHANGE
  OTHER
  STAGE_GATE
  ACTIVATION
}

enum Task_Priority {
  LOW
  MEDIUM
  HIGH
}

enum Task_Status {
  IN_BACKLOG
  IN_PROGRESS
  DONE
}

enum WBS_Element_Status {
  INACTIVE
  ACTIVE
  COMPLETE
}

enum Role_Type {
  APP_ADMIN
  ADMIN
  HEAD
  LEADERSHIP
  MEMBER
  GUEST
}

enum Theme {
  LIGHT
  DARK
}

enum Scope_CR_Why_Type {
  ESTIMATION
  SCHOOL
  DESIGN
  MANUFACTURING
  RULES
  INITIALIZATION
  COMPETITION
  MAINTENANCE
  OTHER_PROJECT
  OTHER
}

enum Work_Package_Stage {
  RESEARCH
  DESIGN
  MANUFACTURING
  INSTALL
  TESTING
}

enum Club_Accounts {
  CASH
  BUDGET
}

enum Reimbursement_Status_Type {
  PENDING_LEADERSHIP_APPROVAL
  PENDING_FINANCE
  SABO_SUBMITTED
  ADVISOR_APPROVED
  REIMBURSED
  DENIED
}

enum Other_Reimbursement_Product_Reason {
  TOOLS_AND_EQUIPMENT
  COMPETITION
  CONSUMABLES
  GENERAL_STOCK
  SUBSCRIPTIONS_AND_MEMBERSHIPS
}

enum Material_Status {
  RECEIVED
  ORDERED
  SHIPPED
  NOT_READY_TO_ORDER
  READY_TO_ORDER
}

enum Design_Review_Status {
  UNCONFIRMED
  CONFIRMED
  SCHEDULED
  DONE
}

model User {
  userId             String                @id @default(uuid())
  firstName          String
  lastName           String
  googleAuthId       String                @unique
  email              String                @unique
  emailId            String?               @unique
  roles              Role[]
  userSettings       User_Settings?
  userSecureSettings User_Secure_Settings?

  // Relation references
  submittedChangeRequests    Change_Request[]          @relation(name: "submittedChangeRequests")
  reviewedChangeRequests     Change_Request[]          @relation(name: "reviewedChangeRequests")
  deletedChangeRequests      Change_Request[]          @relation(name: "deletedChangeRequests")
  changeRequestsToReview     Change_Request[]          @relation(name: "requestedChangeRequestReviewers")
  markedAslead               Activation_CR[]           @relation(name: "markAsLead")
  markedAsmanager            Activation_CR[]           @relation(name: "markAsManager")
  changes                    Change[]
  lead                       WBS_Element[]             @relation(name: "lead")
  manager                    WBS_Element[]             @relation(name: "manager")
  Session                    Session[]
  teamsAsMember              Team[]                    @relation(name: "teamsAsMember")
  teamsAsHead                Team[]                    @relation(name: "teamsAsHead")
  teamsAsLead                Team[]                    @relation(name: "teamsAsLead")
  deletedWBSElements         WBS_Element[]             @relation(name: "deletedWbsElements")
  checkedDescriptionBullets  Description_Bullet[]      @relation(name: "checkDescriptionBullets")
  createdProposedSolutions   Proposed_Solution[]
  createdTasks               Task[]                    @relation(name: "createdBy")
  deletedTasks               Task[]                    @relation(name: "deletedBy")
  assignedTasks              Task[]                    @relation(name: "assignedTo")
  favoriteProjects           Project[]                 @relation(name: "favoritedBy")
  reimbursementRequests      Reimbursement_Request[]   @relation(name: "reimbursementRequestRecipient")
  reimbursementStatuses      Reimbursement_Status[]
  reimbursements             Reimbursement[]           @relation(name: "purchaser")
  submittedReimbursements    Reimbursement[]           @relation(name: "submitter")
  createdLinks               Link[]                    @relation(name: "linkCreator")
  createdLinkTypes           Link_Type[]               @relation(name: "linkTypeCreator")
  deletedReceipts            Receipt[]                 @relation(name: "deletedReceipts")
  createdReceipts            Receipt[]                 @relation(name: "receiptsCreatedBy")
  deletedAssemblies          Assembly[]                @relation(name: "assemblyDeleter")
  createdAssemblies          Assembly[]                @relation(name: "assemblyCreator")
  deletedMaterials           Material[]                @relation(name: "materialDeleter")
  createdMaterials           Material[]                @relation(name: "materialCreator")
  archivedTeams              Team[]                    @relation(name: "userArchived")
  createdMaterialTypes       Material_Type[]           @relation(name: "materialTypeCreator")
  createdManufacturers       Manufacturer[]            @relation(name: "manufacturerCreator")
  requiredDesignReviews      Design_Review[]           @relation(name: "requiredAttendee")
  optionalDesignReviews      Design_Review[]           @relation(name: "optionalAttendee")
  userConfirmedDesignReviews Design_Review[]           @relation(name: "confirmedAttendee")
  userDeniedDesignReviews    Design_Review[]           @relation(name: "deniedAttendee")
  attendedDesignReviews      Design_Review[]           @relation(name: "userAttended")
  createdDesignReviews       Design_Review[]           @relation(name: "designReviewCreator")
  deletedDesignReviews       Design_Review[]           @relation(name: "designReviewDeleter")
  drScheduleSettings         Schedule_Settings?
  createdWorkPackageTemplate Work_Package_Template[]   @relation(name: "workPackageTemplateCreator")
  deletedWorkPackageTemplate Work_Package_Template[]   @relation(name: "workPackageTemplateDeleter")
  wbsProposedlead            Wbs_Proposed_Changes[]    @relation(name: "wbslead")
  wbsProposedmanager         Wbs_Proposed_Changes[]    @relation(name: "wbsmanager")
  organizations              Organization[]            @relation(name: "organizationMembers")
  deletedOrganizations       Organization[]            @relation(name: "organizationDeleter")
  createdOrganizations       Organization[]            @relation(name: "organizationCreator")
  createdDescriptionBullets  Description_Bullet_Type[] @relation(name: "descriptionBulletTypeCreator")
  deletedDescriptionBullets  Description_Bullet_Type[] @relation(name: "descriptionBulletTypeDeleter")
  createdUnits               Unit[]                    @relation(name: "unitCreator")
  organizationsAsAdvisor     Organization[]            @relation(name: "advisor")
  organizationsAsTreasurer   Organization[]            @relation(name: "treasurer")
}

model Role {
  roleId   String    @id @default(uuid())
  roleType Role_Type

  userId         String
  user           User         @relation(fields: [userId], references: [userId])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [organizationId])

  @@unique([userId, organizationId], name: "uniqueRole")
}

model Team {
  teamId                 String                     @id @default(uuid())
  teamName               String
  slackId                String
  description            String                     @default("")
  financeTeam            Boolean                    @default(false)
  projects               Project[]                  @relation(name: "assignedBy")
  members                User[]                     @relation(name: "teamsAsMember")
  leads                  User[]                     @relation(name: "teamsAsLead")
  headId                 String
  head                   User                       @relation(name: "teamsAsHead", fields: [headId], references: [userId])
  dateArchived           DateTime?
  userArchivedId         String?
  userArchived           User?                      @relation(name: "userArchived", fields: [userArchivedId], references: [userId])
  meetings               Meeting[]
  proposedProjectChanges Project_Proposed_Changes[] @relation(name: "proposedProjectTeams")
  teamType               Team_Type?                 @relation(fields: [teamTypeId], references: [teamTypeId])
  teamTypeId             String?
  organizationId         String
  organization           Organization               @relation(fields: [organizationId], references: [organizationId])
}

model Session {
  sessionId  String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [userId])
  created    DateTime @default(now())
  deviceInfo String?
}

model User_Settings {
  id           String @id @default(uuid())
  userId       String @unique
  user         User   @relation(fields: [userId], references: [userId])
  defaultTheme Theme  @default(DARK)
  slackId      String @default("")
}

model Change_Request {
  crId          String    @id @default(uuid())
  identifier    Int
  submitterId   String
  submitter     User      @relation(name: "submittedChangeRequests", fields: [submitterId], references: [userId])
  dateSubmitted DateTime  @default(now())
  dateDeleted   DateTime?

  organizationId           String
  organization             Organization   @relation(fields: [organizationId], references: [organizationId])
  wbsElementId             String
  wbsElement               WBS_Element    @relation(fields: [wbsElementId], references: [wbsElementId])
  type                     CR_Type
  reviewerId               String?
  reviewer                 User?          @relation(name: "reviewedChangeRequests", fields: [reviewerId], references: [userId])
  requestedReviewers       User[]         @relation(name: "requestedChangeRequestReviewers")
  deletedByUserId          String?
  deletedBy                User?          @relation(name: "deletedChangeRequests", fields: [deletedByUserId], references: [userId])
  dateReviewed             DateTime?
  accepted                 Boolean?
  reviewNotes              String?
  changes                  Change[]
  scopeChangeRequest       Scope_CR?
  stageGateChangeRequest   Stage_Gate_CR?
  activationChangeRequest  Activation_CR?
  notificationSlackThreads Message_Info[]

  @@unique([identifier, organizationId], name: "uniqueChangeRequest")
}

model Message_Info {
  messageInfoId String @id @default(uuid())
  channelId     String
  timestamp     String

  changeRequestId String?
  changeRequest   Change_Request? @relation(fields: [changeRequestId], references: [crId])
  designReviewId  String?
  designReview    Design_Review?  @relation(fields: [designReviewId], references: [designReviewId])
}

model Scope_CR {
  scopeCrId          String                @id @default(uuid())
  changeRequestId    String                @unique
  changeRequest      Change_Request        @relation(fields: [changeRequestId], references: [crId])
  what               String
  why                Scope_CR_Why[]
  scopeImpact        String
  timelineImpact     Int
  budgetImpact       Int
  proposedSolutions  Proposed_Solution[]
  wbsProposedChanges Wbs_Proposed_Changes? @relation(name: "wbsProposedChanges")
  wbsOriginalData    Wbs_Proposed_Changes? @relation(name: "wbsOriginalData")
}

model Proposed_Solution {
  proposedSolutionId   String   @id @default(uuid())
  description          String
  timelineImpact       Int
  budgetImpact         Int
  scopeImpact          String
  scopeChangeRequest   Scope_CR @relation(fields: [scopeChangeRequestId], references: [scopeCrId])
  scopeChangeRequestId String
  createdByUserId      String
  createdBy            User     @relation(fields: [createdByUserId], references: [userId])
  dateCreated          DateTime @default(now())
  approved             Boolean  @default(false)
}

model Scope_CR_Why {
  scopeCrWhyId String            @id @default(uuid())
  scopeCrId    String
  scopeCr      Scope_CR          @relation(fields: [scopeCrId], references: [scopeCrId])
  type         Scope_CR_Why_Type
  explain      String
}

model Stage_Gate_CR {
  stageGateCrId   String         @id @default(uuid())
  changeRequestId String         @unique
  changeRequest   Change_Request @relation(fields: [changeRequestId], references: [crId])
  leftoverBudget  Int
  confirmDone     Boolean
}

model Activation_CR {
  activationCrId  String         @id @default(uuid())
  changeRequestId String         @unique
  changeRequest   Change_Request @relation(fields: [changeRequestId], references: [crId])
  leadId          String
  lead            User           @relation(name: "markAsLead", fields: [leadId], references: [userId])
  managerId       String
  manager         User           @relation(name: "markAsManager", fields: [managerId], references: [userId])
  startDate       DateTime
  confirmDetails  Boolean
}

model Change {
  changeId        String         @id @default(uuid())
  changeRequestId String
  changeRequest   Change_Request @relation(fields: [changeRequestId], references: [crId])
  dateImplemented DateTime       @default(now())
  implementerId   String
  implementer     User           @relation(fields: [implementerId], references: [userId])
  wbsElementId    String
  wbsElement      WBS_Element    @relation(fields: [wbsElementId], references: [wbsElementId])
  detail          String
}

model WBS_Element {
  wbsElementId      String             @id @default(uuid())
  dateCreated       DateTime           @default(now())
  dateDeleted       DateTime?
  carNumber         Int
  projectNumber     Int
  workPackageNumber Int
  name              String
  status            WBS_Element_Status @default(INACTIVE)
  leadId            String?
  lead              User?              @relation(name: "lead", fields: [leadId], references: [userId])
  managerId         String?
  manager           User?              @relation(name: "manager", fields: [managerId], references: [userId])
  changeRequests    Change_Request[]
  changes           Change[]
  deletedByUserId   String?
  deletedBy         User?              @relation(name: "deletedWbsElements", fields: [deletedByUserId], references: [userId])

  // A WBS Element can be either a project, a work package or a car, not a combination or none of them
  project     Project?
  workPackage Work_Package?
  car         Car?

  blocking                    Work_Package[]                  @relation("blockedBy")
  tasks                       Task[]
  links                       Link[]                          @relation(name: "links")
  assemblies                  Assembly[]
  materials                   Material[]
  reimbursementProductReasons Reimbursement_Product_Reason[]
  designReviews               Design_Review[]
  proposedBlockedByChanges    Work_Package_Proposed_Changes[] @relation(name: "proposedBlockedBy")
  descriptionBullets          Description_Bullet[]
  organizationId              String
  organization                Organization                    @relation(fields: [organizationId], references: [organizationId])

  @@unique([carNumber, projectNumber, workPackageNumber, organizationId], name: "wbsNumber")
}

model Project {
  projectId    String         @id @default(uuid())
  wbsElementId String         @unique
  wbsElement   WBS_Element    @relation(fields: [wbsElementId], references: [wbsElementId])
  budget       Int            @default(0)
  summary      String
  workPackages Work_Package[]
  carId        String
  car          Car            @relation(fields: [carId], references: [carId])
  teams        Team[]         @relation(name: "assignedBy")
  favoritedBy  User[]         @relation(name: "favoritedBy")
}

model Work_Package {
  workPackageId  String              @id @default(uuid())
  wbsElementId   String              @unique
  wbsElement     WBS_Element         @relation(fields: [wbsElementId], references: [wbsElementId])
  projectId      String
  project        Project             @relation(fields: [projectId], references: [projectId])
  orderInProject Int
  startDate      DateTime
  duration       Int
  blockedBy      WBS_Element[]       @relation(name: "blockedBy")
  stage          Work_Package_Stage?
}

model Link_Type {
  id             String       @id @default(uuid())
  name           String
  dateCreated    DateTime     @default(now())
  iconName       String
  required       Boolean
  creatorId      String
  creator        User         @relation(name: "linkTypeCreator", fields: [creatorId], references: [userId])
  links          Link[]       @relation(name: "linkTypes")
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [organizationId])

  @@unique([name, organizationId], name: "uniqueLinkType")
}

model Link {
  linkId      String    @id @default(uuid())
  url         String
  creatorId   String
  creator     User      @relation(name: "linkCreator", fields: [creatorId], references: [userId])
  dateCreated DateTime  @default(now())
  dateDeleted DateTime?
  linkTypeId  String
  linkType    Link_Type @relation(name: "linkTypes", fields: [linkTypeId], references: [id])

  // Either its on a wbsElement, a wbsProposedChanges, or an organization
  wbsElementId         String?
  wbsElment            WBS_Element?          @relation(name: "links", fields: [wbsElementId], references: [wbsElementId])
  wbsProposedChangesId String?
  wbsProposedChanges   Wbs_Proposed_Changes? @relation(name: "proposedChangeLinks", fields: [wbsProposedChangesId], references: [wbsProposedChangesId])
  organization         Organization?         @relation(fields: [organizationId], references: [organizationId])
  organizationId       String?
}

model Description_Bullet_Type {
  id                  String    @id @default(uuid())
  name                String
  dateCreated         DateTime  @default(now())
  dateDeleted         DateTime?
  projectRequired     Boolean
  workPackageRequired Boolean

  userCreatedId      String
  userCreated        User                 @relation(name: "descriptionBulletTypeCreator", fields: [userCreatedId], references: [userId])
  userDeletedId      String?
  userDeleted        User?                @relation(name: "descriptionBulletTypeDeleter", fields: [userDeletedId], references: [userId])
  descriptionBullets Description_Bullet[]
  organizationId     String
  organization       Organization         @relation(fields: [organizationId], references: [organizationId])

  @@unique([name, organizationId], name: "uniqueDescriptionBulletType")
}

model Description_Bullet {
  descriptionId           String                  @id @default(uuid())
  dateAdded               DateTime                @default(now())
  userCheckedId           String?
  userChecked             User?                   @relation(name: "checkDescriptionBullets", fields: [userCheckedId], references: [userId])
  dateTimeChecked         DateTime?
  dateDeleted             DateTime?
  detail                  String
  descriptionBulletTypeId String
  descriptionBulletType   Description_Bullet_Type @relation(fields: [descriptionBulletTypeId], references: [id])

  // Relation references, A description bullet can be either on a WBS_Element, a Proposed Change or a work package template, not multiple and not none
  wbsElementId          String?
  wbsElement            WBS_Element?           @relation(fields: [wbsElementId], references: [wbsElementId])
  proposedChangeId      String?
  proposedChange        Wbs_Proposed_Changes?  @relation(fields: [proposedChangeId], references: [wbsProposedChangesId], name: "proposedDescriptionBulletChanges")
  workPackageTemplateId String?
  workPackageTemplate   Work_Package_Template? @relation(fields: [workPackageTemplateId], references: [workPackageTemplateId])
}

model Task {
  taskId          String        @id @default(uuid())
  title           String
  notes           String
  deadline        DateTime
  assignees       User[]        @relation(name: "assignedTo")
  priority        Task_Priority
  status          Task_Status
  deletedBy       User?         @relation(name: "deletedBy", fields: [deletedByUserId], references: [userId])
  deletedByUserId String?
  dateDeleted     DateTime?
  createdBy       User          @relation(name: "createdBy", fields: [createdByUserId], references: [userId])
  createdByUserId String
  dateCreated     DateTime      @default(now())
  wbsElement      WBS_Element   @relation(fields: [wbsElementId], references: [wbsElementId])
  wbsElementId    String
}

model Reimbursement_Status {
  reimbursementStatusId  String                    @id @default(uuid())
  type                   Reimbursement_Status_Type
  userId                 String
  user                   User                      @relation(fields: [userId], references: [userId])
  dateCreated            DateTime                  @default(now())
  reimbursementRequestId String
  reimbursementRequest   Reimbursement_Request     @relation(fields: [reimbursementRequestId], references: [reimbursementRequestId])
}

model Receipt {
  receiptId              String                @id @default(uuid())
  googleFileId           String                @unique
  name                   String
  deletedByUserId        String?
  deletedBy              User?                 @relation(name: "deletedReceipts", fields: [deletedByUserId], references: [userId])
  dateDeleted            DateTime?
  createdBy              User                  @relation(name: "receiptsCreatedBy", fields: [createdByUserId], references: [userId])
  createdByUserId        String
  dateCreated            DateTime              @default(now())
  reimbursementRequestId String
  reimbursementRequest   Reimbursement_Request @relation(fields: [reimbursementRequestId], references: [reimbursementRequestId])
}

model Reimbursement_Request {
  reimbursementRequestId String                  @id @default(uuid())
  identifier             Int
  saboId                 Int?                    @unique
  dateCreated            DateTime                @default(now())
  dateDeleted            DateTime?
  dateOfExpense          DateTime
  reimbursementStatuses  Reimbursement_Status[]
  recipientId            String
  recipient              User                    @relation(name: "reimbursementRequestRecipient", fields: [recipientId], references: [userId])
  vendorId               String
  vendor                 Vendor                  @relation(fields: [vendorId], references: [vendorId])
  account                Club_Accounts
  totalCost              Int
  receiptPictures        Receipt[]
  reimbursementProducts  Reimbursement_Product[]
  dateDelivered          DateTime?
  accountCodeId          String
  accountCode            Account_Code            @relation(fields: [accountCodeId], references: [accountCodeId])
  organizationId         String
  organization           Organization            @relation(fields: [organizationId], references: [organizationId])

  @@unique([identifier, organizationId], name: "uniqueReimbursementRequest")
}

model Reimbursement_Product_Reason {
  reimbursementProductReasonId String                 @id @default(uuid())
  reimbursementProduct         Reimbursement_Product?

  // Can be either a WBS_Element or an Other_Reimbursement_Product_Reason, not both and not neither
  wbsElementId String?
  wbsElement   WBS_Element?                        @relation(fields: [wbsElementId], references: [wbsElementId])
  otherReason  Other_Reimbursement_Product_Reason?
}

model Reimbursement_Product {
  reimbursementProductId       String                       @id @default(uuid())
  name                         String
  dateDeleted                  DateTime?
  cost                         Int
  reimbursementProductReasonId String                       @unique
  reimbursementProductReason   Reimbursement_Product_Reason @relation(fields: [reimbursementProductReasonId], references: [reimbursementProductReasonId])
  reimbursementRequestId       String
  reimbursementRequest         Reimbursement_Request        @relation(fields: [reimbursementRequestId], references: [reimbursementRequestId])
}

model Vendor {
  vendorId       String                  @id @default(uuid())
  dateCreated    DateTime                @default(now())
  dateDeleted    DateTime?
  name           String
  requests       Reimbursement_Request[]
  organizationId String
  organization   Organization            @relation(fields: [organizationId], references: [organizationId])

  @@unique([name, organizationId], name: "uniqueVendor")
}

model Account_Code {
  accountCodeId        String                  @id @default(uuid())
  name                 String
  code                 Int
  allowed              Boolean
  allowedRefundSources Club_Accounts[]
  requests             Reimbursement_Request[]
  dateDeleted          DateTime?
  organizationId       String
  organization         Organization            @relation(fields: [organizationId], references: [organizationId])

  @@unique([name, organizationId], name: "uniqueExpenseType")
}

model Reimbursement {
  reimbursementId String       @id @default(uuid())
  dateCreated     DateTime     @default(now())
  amount          Int
  userSubmittedId String
  userSubmitted   User         @relation(fields: [userSubmittedId], references: [userId], name: "submitter")
  purchaserId     String
  purchaser       User         @relation(fields: [purchaserId], references: [userId], name: "purchaser")
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [organizationId])
}

model User_Secure_Settings {
  userSecureSettingsId String @id @default(uuid())
  nuid                 String @unique
  userId               String @unique
  user                 User   @relation(fields: [userId], references: [userId])
  street               String
  city                 String
  state                String
  zipcode              String
  phoneNumber          String @unique
}

model Unit {
  id             String       @id @default(uuid())
  name           String
  materials      Material[]
  userCreatedId  String
  userCreated    User         @relation(name: "unitCreator", fields: [userCreatedId], references: [userId])
  dateCreated    DateTime     @default(now())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [organizationId])

  @@unique([name, organizationId], name: "uniqueUnit")
}

model Assembly {
  assemblyId    String      @id @default(uuid())
  name          String
  pdmFileName   String?
  dateDeleted   DateTime?
  userDeleted   User?       @relation(fields: [userDeletedId], references: [userId], name: "assemblyDeleter")
  userDeletedId String?
  dateCreated   DateTime
  userCreated   User        @relation(fields: [userCreatedId], references: [userId], name: "assemblyCreator")
  userCreatedId String
  wbsElement    WBS_Element @relation(fields: [wbsElementId], references: [wbsElementId])
  wbsElementId  String
  materials     Material[]
}

model Material {
  materialId             String          @id @default(uuid())
  assembly               Assembly?       @relation(fields: [assemblyId], references: [assemblyId])
  assemblyId             String?
  name                   String
  wbsElement             WBS_Element     @relation(fields: [wbsElementId], references: [wbsElementId])
  wbsElementId           String
  dateDeleted            DateTime?
  userDeleted            User?           @relation(fields: [userDeletedId], references: [userId], name: "materialDeleter")
  userDeletedId          String?
  dateCreated            DateTime
  userCreated            User            @relation(fields: [userCreatedId], references: [userId], name: "materialCreator")
  userCreatedId          String
  status                 Material_Status
  materialType           Material_Type   @relation(fields: [materialTypeId], references: [id])
  materialTypeId         String
  manufacturer           Manufacturer    @relation(fields: [manufacturerId], references: [id])
  manufacturerId         String
  manufacturerPartNumber String
  pdmFileName            String?
  quantity               Decimal
  unit                   Unit?           @relation(fields: [unitId], references: [id])
  unitId                 String?
  price                  Int
  subtotal               Int
  linkUrl                String
  notes                  String?
}

model Material_Type {
  id             String       @id @default(uuid())
  name           String
  dateCreated    DateTime
  dateDeleted    DateTime?
  userCreatedId  String
  userCreated    User         @relation(name: "materialTypeCreator", fields: [userCreatedId], references: [userId])
  materials      Material[]
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [organizationId])

  @@unique([name, organizationId], name: "uniqueMaterialType")
}

model Manufacturer {
  id             String       @id @default(uuid())
  name           String
  dateCreated    DateTime
  dateDeleted    DateTime?
  userCreatedId  String
  userCreated    User         @relation(name: "manufacturerCreator", fields: [userCreatedId], references: [userId])
  materials      Material[]
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [organizationId])

  @@unique([name, organizationId], name: "uniqueManufacturer")
}

model Team_Type {
  teamTypeId     String          @id @default(uuid())
  name           String
  iconName       String
  designReviews  Design_Review[]
  team           Team[]
  organizationId String
  organization   Organization    @relation(fields: [organizationId], references: [organizationId])

  @@unique([name, organizationId], name: "uniqueTeamType")
}

model Design_Review {
  designReviewId           String               @id @default(uuid())
  dateScheduled            DateTime             @db.Date
  // Meeting times are an integer between 0 and 83 from 10am - 10pm (Monday - Sunday), eg. 0 = 10:00am Monday, 12 = 10:00am Tuesday
  meetingTimes             Int[]
  dateCreated              DateTime             @default(now()) @db.Timestamp(3)
  userCreated              User                 @relation(fields: [userCreatedId], references: [userId], name: "designReviewCreator")
  userCreatedId            String
  status                   Design_Review_Status
  teamType                 Team_Type            @relation(fields: [teamTypeId], references: [teamTypeId])
  teamTypeId               String
  requiredMembers          User[]               @relation(name: "requiredAttendee")
  optionalMembers          User[]               @relation(name: "optionalAttendee")
  confirmedMembers         User[]               @relation(name: "confirmedAttendee")
  deniedMembers            User[]               @relation(name: "deniedAttendee")
  location                 String?
  isOnline                 Boolean
  isInPerson               Boolean
  zoomLink                 String?
  attendees                User[]               @relation(name: "userAttended")
  dateDeleted              DateTime?            @db.Timestamp(3)
  userDeleted              User?                @relation(fields: [userDeletedId], references: [userId], name: "designReviewDeleter")
  userDeletedId            String?
  docTemplateLink          String?
  wbsElementId             String
  wbsElement               WBS_Element          @relation(fields: [wbsElementId], references: [wbsElementId])
  notificationSlackThreads Message_Info[]
}

model Availability {
  availabilityId     String            @id @default(uuid())
  scheduleSettingsId String
  scheduleSettings   Schedule_Settings @relation(fields: [scheduleSettingsId], references: [drScheduleSettingsId])

  // Availibilies are integers between 0 and 83 from 10am - 10pm (Monday - Sunday) see meetingTime field in Design_Review
  availability Int[]
  dateSet      DateTime @default(now())
}

model Schedule_Settings {
  drScheduleSettingsId String         @id @default(uuid())
  personalGmail        String
  personalZoomLink     String
  User                 User           @relation(fields: [userId], references: [userId])
  userId               String         @unique
  availabilities       Availability[]
}

model Meeting {
  meetingId    String @id @default(uuid())
  title        String
  // meetingTimes are integers between 0 and 83 representing time after from 10am - 10pm (from Monday - Sunday) see meetingTime field in Design_Review
  meetingTimes Int[]
  team         Team?  @relation(fields: [teamId], references: [teamId])
  teamId       String
}

model Wbs_Proposed_Changes {
  wbsProposedChangesId             String                         @id @default(uuid())
  name                             String
  status                           WBS_Element_Status
  leadId                           String?
  lead                             User?                          @relation(name: "wbslead", fields: [leadId], references: [userId])
  managerId                        String?
  manager                          User?                          @relation(name: "wbsmanager", fields: [managerId], references: [userId])
  links                            Link[]                         @relation(name: "proposedChangeLinks")
  projectProposedChanges           Project_Proposed_Changes?      @relation(name: "projectProposedChanges")
  workPackageProposedChanges       Work_Package_Proposed_Changes? @relation(name: "wpProposedChanges")
  proposedDescriptionBulletChanges Description_Bullet[]           @relation(name: "proposedDescriptionBulletChanges")
  dateDeleted                      DateTime?

  // A Wbs Proposed Change can either be original data or a proposed change, not both and not neither
  scopeChangeRequestAsOriginalData   Scope_CR? @relation(name: "wbsOriginalData", fields: [scopeChangeRequestAsOriginalDataId], references: [scopeCrId])
  scopeChangeRequestAsOriginalDataId String?   @unique
  scopeChangeRequest                 Scope_CR? @relation(name: "wbsProposedChanges", fields: [scopeChangeRequestId], references: [scopeCrId])
  scopeChangeRequestId               String?   @unique
}

model Project_Proposed_Changes {
  projectProposedChangesId String               @id @default(uuid())
  budget                   Int
  summary                  String
  teams                    Team[]               @relation(name: "proposedProjectTeams")
  wbsProposedChanges       Wbs_Proposed_Changes @relation(name: "projectProposedChanges", fields: [wbsProposedChangesId], references: [wbsProposedChangesId])
  wbsProposedChangesId     String               @unique

  workPackageProposedChanges Work_Package_Proposed_Changes[]
  carId                      String?
  car                        Car?                            @relation(fields: [carId], references: [carId])
}

model Work_Package_Proposed_Changes {
  workPackageProposedChangesId String                    @id @default(uuid())
  startDate                    DateTime                  @db.Date
  duration                     Int
  blockedBy                    WBS_Element[]             @relation(name: "proposedBlockedBy")
  stage                        Work_Package_Stage?
  wbsProposedChanges           Wbs_Proposed_Changes      @relation(name: "wpProposedChanges", fields: [wbsProposedChangesId], references: [wbsProposedChangesId])
  wbsProposedChangesId         String                    @unique
  projectProposedChanges       Project_Proposed_Changes? @relation(fields: [projectProposedChangesId], references: [projectProposedChangesId])
  projectProposedChangesId     String?
}

model Work_Package_Template {
  workPackageTemplateId String                  @id @default(uuid())
  templateName          String
  templateNotes         String
  workPackageName       String?
  stage                 Work_Package_Stage?
  duration              Int?
  blockedBy             Work_Package_Template[] @relation("blocking")
  blocking              Work_Package_Template[] @relation("blocking")
  descriptionBullets    Description_Bullet[]
  dateCreated           DateTime                @default(now())
  userCreated           User                    @relation(fields: [userCreatedId], references: [userId], name: "workPackageTemplateCreator")
  userCreatedId         String
  dateDeleted           DateTime?
  userDeleted           User?                   @relation(fields: [userDeletedId], references: [userId], name: "workPackageTemplateDeleter")
  userDeletedId         String?
  organizationId        String
  organization          Organization            @relation(fields: [organizationId], references: [organizationId])
}

model Car {
  carId       String   @id @default(uuid())
  dateCreated DateTime @default(now())

  // Relation references
  projects               Project[]
  projectProposedChanges Project_Proposed_Changes[]
  wbsElementId           String                     @unique
  wbsElement             WBS_Element                @relation(fields: [wbsElementId], references: [wbsElementId])
}

model Organization {
  organizationId String    @id @default(uuid())
  name           String
  dateCreated    DateTime  @default(now())
  userCreatedId  String
  userCreated    User      @relation(fields: [userCreatedId], references: [userId], name: "organizationCreator")
  dateDeleted    DateTime?
  userDeletedId  String?
  userDeleted    User?     @relation(fields: [userDeletedId], references: [userId], name: "organizationDeleter")
  treasurerId    String?
  treasurer      User?     @relation(name: "treasurer", fields: [treasurerId], references: [userId])
  advisor        User?     @relation(name: "advisor", fields: [advisorId], references: [userId])
  advisorId      String?
  description    String

  // Relation references
  wbsElements            WBS_Element[]
  users                  User[]                    @relation(name: "organizationMembers")
  linkTypes              Link_Type[]
  materialTypes          Material_Type[]
  manufacturers          Manufacturer[]
  teamTypes              Team_Type[]
  teams                  Team[]
  vendors                Vendor[]
  expenseTypes           Account_Code[]
  reimbursements         Reimbursement[]
  units                  Unit[]
  descriptionBulletTypes Description_Bullet_Type[]
  workPackageTemplates   Work_Package_Template[]
  roles                  Role[]
  changeRequests         Change_Request[]
  reimbursementReqeusts  Reimbursement_Request[]
  usefulLinks            Link[]
}
