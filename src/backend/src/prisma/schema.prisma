// This file is part of NER's FinishLine and licensed under GNU AGPLv3.
// See the LICENSE file in the repository root folder for details.

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum CR_Type {
  ISSUE
  DEFINITION_CHANGE
  OTHER
  STAGE_GATE
  ACTIVATION
}

enum Task_Priority {
  LOW
  MEDIUM
  HIGH
}

enum Task_Status {
  IN_BACKLOG
  IN_PROGRESS
  DONE
}

enum WBS_Element_Status {
  INACTIVE
  ACTIVE
  COMPLETE
}

enum Role {
  APP_ADMIN
  ADMIN
  HEAD
  LEADERSHIP
  MEMBER
  GUEST
}

enum Theme {
  LIGHT
  DARK
}

enum Scope_CR_Why_Type {
  ESTIMATION
  SCHOOL
  DESIGN
  MANUFACTURING
  RULES
  INITIALIZATION
  COMPETITION
  MAINTENANCE
  OTHER_PROJECT
  OTHER
}

enum Work_Package_Stage {
  RESEARCH
  DESIGN
  MANUFACTURING
  INSTALL
  TESTING
}

model User {
  userId                     Int                     @id @default(autoincrement())
  firstName                  String
  lastName                   String
  googleAuthId               String                  @unique
  email                      String                  @unique
  emailId                    String?                 @unique
  role                       Role                    @default(GUEST)
  userSettings               User_Settings?
  userSecureSettings         User_Secure_Settings?
  // Relation references
  submittedChangeRequests    Change_Request[]        @relation(name: "submittedChangeRequests")
  reviewedChangeRequests     Change_Request[]        @relation(name: "reviewedChangeRequests")
  deletedChangeRequests      Change_Request[]        @relation(name: "deletedChangeRequests")
  changeRequestsToReview     Change_Request[]        @relation(name: "requestedChangeRequestReviewers")
  markedAsProjectLead        Activation_CR[]         @relation(name: "markAsProjectLead")
  markedAsProjectManager     Activation_CR[]         @relation(name: "markAsProjectManager")
  changes                    Change[]
  projectLead                WBS_Element[]           @relation(name: "projectLead")
  projectManager             WBS_Element[]           @relation(name: "projectManager")
  Session                    Session[]
  teamsAsMember              Team[]                  @relation(name: "teamsAsMember")
  teamAsHead                 Team?                   @relation(name: "teamAsHead")
  teamsAsLead                Team[]                  @relation(name: "teamsAsLead")
  deletedWBSElements         WBS_Element[]           @relation(name: "deletedWbsElements")
  checkedDescriptionBullets  Description_Bullet[]    @relation(name: "checkDescriptionBullets")
  createdProposedSolutions   Proposed_Solution[]
  createdTasks               Task[]                  @relation(name: "createdBy")
  deletedTasks               Task[]                  @relation(name: "deletedBy")
  assignedTasks              Task[]                  @relation(name: "assignedTo")
  favoriteProjects           Project[]               @relation(name: "favoritedBy")
  reimbursementRequests      Reimbursement_Request[] @relation(name: "reimbursementRequestRecipient")
  reimbursementStatuses      Reimbursement_Status[]
  reimbursements             Reimbursement[]         @relation(name: "purchaser")
  submittedReimbursements    Reimbursement[]         @relation(name: "submitter")
  createdLinks               Link[]                  @relation(name: "linkCreator")
  createdLinkTypes           LinkType[]              @relation(name: "linkTypeCreator")
  deletedReceipts            Receipt[]               @relation(name: "deletedReceipts")
  createdReceipts            Receipt[]               @relation(name: "receiptsCreatedBy")
  deletedAssemblies          Assembly[]              @relation(name: "assemblyDeleter")
  createdAssemblies          Assembly[]              @relation(name: "assemblyCreator")
  deletedMaterials           Material[]              @relation(name: "materialDeleter")
  createdMaterials           Material[]              @relation(name: "materialCreator")
  archivedTeams              Team[]                  @relation(name: "userArchived")
  createdMaterialTypes       Material_Type[]         @relation(name: "materialTypeCreator")
  createdManufacturers       Manufacturer[]          @relation(name: "manufacturerCreator")
  requiredDesignReviews      Design_Review[]         @relation(name: "requiredAttendee")
  optionalDesignReviews      Design_Review[]         @relation(name: "optionalAttendee")
  userConfirmedDesignReviews Design_Review[]         @relation(name: "confirmedAttendee")
  userDeniedDesignReviews    Design_Review[]         @relation(name: "deniedAttendee")
  attendedDesignReviews      Design_Review[]         @relation(name: "userAttended")
  createdDesignReviews       Design_Review[]         @relation(name: "designReviewCreator")
  deletedDesignReviews       Design_Review[]         @relation(name: "designReviewDeleter")
  drScheduleSettings         Schedule_Settings?
  createdWorkPackageTemplate Work_Package_Template[] @relation(name: "workPackageTemplateCreator")
  deletedWorkPackageTemplate Work_Package_Template[] @relation(name: "workPackageTemplateDeleter")
  wbsProposedProjectLead     Wbs_Proposed_Changes[]  @relation(name: "wbsProjectLead")
  wbsProposedProjectManager  Wbs_Proposed_Changes[]  @relation(name: "wbsProjectManager")
}

model Team {
  teamId                 String                     @id @default(uuid())
  teamName               String
  slackId                String
  description            String                     @default("")
  projects               Project[]                  @relation(name: "assignedBy")
  members                User[]                     @relation(name: "teamsAsMember")
  leads                  User[]                     @relation(name: "teamsAsLead")
  headId                 Int                        @unique
  head                   User                       @relation(name: "teamAsHead", fields: [headId], references: [userId])
  dateArchived           DateTime?
  userArchivedId         Int?
  userArchived           User?                      @relation(name: "userArchived", fields: [userArchivedId], references: [userId])
  meetings               Meeting[]
  proposedProjectChanges Project_Proposed_Changes[] @relation(name: "proposedProjectTeams")
  teamType               TeamType?                  @relation(fields: [teamTypeId], references: [teamTypeId])
  teamTypeId             String?
}

model Session {
  sessionId  Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [userId])
  created    DateTime @default(now())
  deviceInfo String?
}

model User_Settings {
  id           String @id @default(uuid())
  userId       Int    @unique
  user         User   @relation(fields: [userId], references: [userId])
  defaultTheme Theme  @default(DARK)
  slackId      String @default("")
}

model Change_Request {
  crId                     Int            @id @default(autoincrement())
  submitterId              Int
  submitter                User           @relation(name: "submittedChangeRequests", fields: [submitterId], references: [userId])
  dateSubmitted            DateTime       @default(now())
  dateDeleted              DateTime?
  wbsElementId             Int
  wbsElement               WBS_Element    @relation(fields: [wbsElementId], references: [wbsElementId])
  type                     CR_Type
  reviewerId               Int?
  reviewer                 User?          @relation(name: "reviewedChangeRequests", fields: [reviewerId], references: [userId])
  requestedReviewers       User[]         @relation(name: "requestedChangeRequestReviewers")
  deletedByUserId          Int?
  deletedBy                User?          @relation(name: "deletedChangeRequests", fields: [deletedByUserId], references: [userId])
  dateReviewed             DateTime?
  accepted                 Boolean?
  reviewNotes              String?
  changes                  Change[]
  scopeChangeRequest       Scope_CR?
  stageGateChangeRequest   Stage_Gate_CR?
  activationChangeRequest  Activation_CR?
  notificationSlackThreads Message_Info[]
}

model Message_Info {
  messageInfoId   String          @id @default(uuid())
  channelId       String
  timestamp       String
  changeRequestId Int?
  changeRequest   Change_Request? @relation(fields: [changeRequestId], references: [crId])
  designReviewId  String?
  designReview    Design_Review?  @relation(fields: [designReviewId], references: [designReviewId])
}

model Scope_CR {
  scopeCrId          Int                   @id @default(autoincrement())
  changeRequestId    Int                   @unique
  changeRequest      Change_Request        @relation(fields: [changeRequestId], references: [crId])
  what               String
  why                Scope_CR_Why[]
  scopeImpact        String
  timelineImpact     Int
  budgetImpact       Int
  proposedSolutions  Proposed_Solution[]
  wbsProposedChanges Wbs_Proposed_Changes? @relation(name: "wbsProposedChanges")
  wbsOriginalData    Wbs_Proposed_Changes? @relation(name: "wbsOriginalData")
}

model Proposed_Solution {
  proposedSolutionId String   @id @default(uuid())
  description        String
  timelineImpact     Int
  budgetImpact       Int
  scopeImpact        String
  changeRequest      Scope_CR @relation(fields: [changeRequestId], references: [scopeCrId])
  changeRequestId    Int
  createdByUserId    Int
  createdBy          User     @relation(fields: [createdByUserId], references: [userId])
  dateCreated        DateTime @default(now())
  approved           Boolean  @default(false)
}

model Scope_CR_Why {
  scopeCrWhyId Int               @id @default(autoincrement())
  scopeCrId    Int
  scopeCr      Scope_CR          @relation(fields: [scopeCrId], references: [scopeCrId])
  type         Scope_CR_Why_Type
  explain      String
}

model Stage_Gate_CR {
  stageGateCrId   Int            @id @default(autoincrement())
  changeRequestId Int            @unique
  changeRequest   Change_Request @relation(fields: [changeRequestId], references: [crId])
  leftoverBudget  Int
  confirmDone     Boolean
}

model Activation_CR {
  activationCrId   Int            @id @default(autoincrement())
  changeRequestId  Int            @unique
  changeRequest    Change_Request @relation(fields: [changeRequestId], references: [crId])
  projectLeadId    Int
  projectLead      User           @relation(name: "markAsProjectLead", fields: [projectLeadId], references: [userId])
  projectManagerId Int
  projectManager   User           @relation(name: "markAsProjectManager", fields: [projectManagerId], references: [userId])
  startDate        DateTime
  confirmDetails   Boolean
}

model Change {
  changeId        Int            @id @default(autoincrement())
  changeRequestId Int
  changeRequest   Change_Request @relation(fields: [changeRequestId], references: [crId])
  dateImplemented DateTime       @default(now())
  implementerId   Int
  implementer     User           @relation(fields: [implementerId], references: [userId])
  wbsElementId    Int
  wbsElement      WBS_Element    @relation(fields: [wbsElementId], references: [wbsElementId])
  detail          String
}

model WBS_Element {
  wbsElementId                Int                             @id @default(autoincrement())
  dateCreated                 DateTime                        @default(now())
  dateDeleted                 DateTime?
  carNumber                   Int
  projectNumber               Int
  workPackageNumber           Int
  name                        String
  status                      WBS_Element_Status              @default(INACTIVE)
  leadId                      Int?
  lead                        User?                           @relation(name: "projectLead", fields: [leadId], references: [userId])
  managerId                   Int?
  manager                     User?                           @relation(name: "projectManager", fields: [managerId], references: [userId])
  changeRequests              Change_Request[]
  changes                     Change[]
  deletedByUserId             Int?
  deletedBy                   User?                           @relation(name: "deletedWbsElements", fields: [deletedByUserId], references: [userId])
  project                     Project?
  workPackage                 Work_Package?
  blocking                    Work_Package[]                  @relation("blockedBy")
  tasks                       Task[]
  links                       Link[]                          @relation(name: "links")
  assemblies                  Assembly[]
  materials                   Material[]
  reimbursementProductReasons Reimbursement_Product_Reason[]
  designReviews               Design_Review[]
  proposedBlockedByChanges    Work_Package_Proposed_Changes[] @relation(name: "proposedBlockedBy")

  @@unique([carNumber, projectNumber, workPackageNumber], name: "wbsNumber")
}

model Project {
  projectId        Int                  @id @default(autoincrement())
  wbsElementId     Int                  @unique
  wbsElement       WBS_Element          @relation(fields: [wbsElementId], references: [wbsElementId])
  budget           Int                  @default(0)
  summary          String
  rules            String[]
  goals            Description_Bullet[] @relation(name: "projectGoals")
  features         Description_Bullet[] @relation(name: "projectFeatures")
  otherConstraints Description_Bullet[] @relation(name: "projectOtherConstraints")
  workPackages     Work_Package[]
  teams            Team[]               @relation(name: "assignedBy")
  favoritedBy      User[]               @relation(name: "favoritedBy")
}

model Work_Package {
  workPackageId      Int                  @id @default(autoincrement())
  wbsElementId       Int                  @unique
  wbsElement         WBS_Element          @relation(fields: [wbsElementId], references: [wbsElementId])
  projectId          Int
  project            Project              @relation(fields: [projectId], references: [projectId])
  orderInProject     Int
  startDate          DateTime
  duration           Int
  blockedBy          WBS_Element[]        @relation(name: "blockedBy")
  expectedActivities Description_Bullet[] @relation(name: "workPackageExpectedActivities")
  deliverables       Description_Bullet[] @relation(name: "workPackageDeliverables")
  stage              Work_Package_Stage?
}

model LinkType {
  name        String   @id @unique
  dateCreated DateTime @default(now())
  creatorId   Int
  iconName    String
  required    Boolean
  creator     User     @relation(name: "linkTypeCreator", fields: [creatorId], references: [userId])
  links       Link[]   @relation(name: "linkTypes")
}

model Link {
  linkId                                   String                @id @default(uuid())
  url                                      String
  creatorId                                Int
  creator                                  User                  @relation(name: "linkCreator", fields: [creatorId], references: [userId])
  dateCreated                              DateTime              @default(now())
  dateDeleted                              DateTime?
  linkTypeName                             String
  linkType                                 LinkType              @relation(name: "linkTypes", fields: [linkTypeName], references: [name])
  wbsElementId                             Int?
  wbsElment                                WBS_Element?          @relation(name: "links", fields: [wbsElementId], references: [wbsElementId])
  Wbs_Proposed_Changes                     Wbs_Proposed_Changes? @relation(name: "proposedChangeLinks", fields: [wbs_Proposed_ChangesWbsProposedChangesId], references: [wbsProposedChangesId])
  wbs_Proposed_ChangesWbsProposedChangesId String?
}

model Description_Bullet {
  descriptionId                            Int                            @id @default(autoincrement())
  dateAdded                                DateTime                       @default(now())
  userCheckedId                            Int?
  userChecked                              User?                          @relation(name: "checkDescriptionBullets", fields: [userCheckedId], references: [userId])
  dateTimeChecked                          DateTime?
  dateDeleted                              DateTime?
  detail                                   String
  // Relation references
  projectIdGoals                           Int?
  projectGoals                             Project?                       @relation(name: "projectGoals", fields: [projectIdGoals], references: [projectId])
  projectIdFeatures                        Int?
  projectFeatures                          Project?                       @relation(name: "projectFeatures", fields: [projectIdFeatures], references: [projectId])
  projectIdOtherConstraints                Int?
  projectOtherConstraints                  Project?                       @relation(name: "projectOtherConstraints", fields: [projectIdOtherConstraints], references: [projectId])
  workPackageIdExpectedActivities          Int?
  workPackageExpectedActivities            Work_Package?                  @relation(name: "workPackageExpectedActivities", fields: [workPackageIdExpectedActivities], references: [workPackageId])
  workPackageIdDeliverables                Int?
  workPackageDeliverables                  Work_Package?                  @relation(name: "workPackageDeliverables", fields: [workPackageIdDeliverables], references: [workPackageId])
  projectProposedChangesGoalsId            String?
  projectProposedChangesGoals              Project_Proposed_Changes?      @relation(name: "proposedProjectGoals", fields: [projectProposedChangesGoalsId], references: [projectProposedChangesId])
  projectProposedChangesFeaturesId         String?
  projectProposedChangesFeatures           Project_Proposed_Changes?      @relation(name: "proposedProjectFeatures", fields: [projectProposedChangesFeaturesId], references: [projectProposedChangesId])
  projectProposedChangesOtherConstraintsId String?
  projectProposedChangesOtherConstraints   Project_Proposed_Changes?      @relation(name: "proposedProjectOtherConstraints", fields: [projectProposedChangesOtherConstraintsId], references: [projectProposedChangesId])
  wpProposedChangesExpectedActivitiesId    String?
  wpProposedChangesExpectedActivities      Work_Package_Proposed_Changes? @relation(name: "workPackageExpectedActivities", fields: [wpProposedChangesExpectedActivitiesId], references: [workPackageProposedChangesId])
  wpProposedChangesDeliverablesId          String?
  wpProposedChangesDeliverables            Work_Package_Proposed_Changes? @relation(name: "workPackageDeliverables", fields: [wpProposedChangesDeliverablesId], references: [workPackageProposedChangesId])
}

model Task {
  taskId          String        @id @default(uuid())
  title           String
  notes           String
  deadline        DateTime
  assignees       User[]        @relation(name: "assignedTo")
  priority        Task_Priority
  status          Task_Status
  deletedBy       User?         @relation(name: "deletedBy", fields: [deletedByUserId], references: [userId])
  deletedByUserId Int?
  dateDeleted     DateTime?
  createdBy       User          @relation(name: "createdBy", fields: [createdByUserId], references: [userId])
  createdByUserId Int
  dateCreated     DateTime      @default(now())
  wbsElement      WBS_Element   @relation(fields: [wbsElementId], references: [wbsElementId])
  wbsElementId    Int
}

enum Club_Accounts {
  CASH
  BUDGET
}

enum Reimbursement_Status_Type {
  PENDING_FINANCE
  SABO_SUBMITTED
  ADVISOR_APPROVED
  REIMBURSED
  DENIED
}

model Reimbursement_Status {
  reimbursementStatusId  Int                       @id @default(autoincrement())
  type                   Reimbursement_Status_Type
  userId                 Int
  user                   User                      @relation(fields: [userId], references: [userId])
  dateCreated            DateTime                  @default(now())
  reimbursementRequestId String
  reimbursementRequest   Reimbursement_Request     @relation(fields: [reimbursementRequestId], references: [reimbursementRequestId])
}

model Receipt {
  receiptId              String                @id @default(uuid())
  googleFileId           String                @unique
  name                   String
  deletedByUserId        Int?
  deletedBy              User?                 @relation(name: "deletedReceipts", fields: [deletedByUserId], references: [userId])
  dateDeleted            DateTime?
  createdBy              User                  @relation(name: "receiptsCreatedBy", fields: [createdByUserId], references: [userId])
  createdByUserId        Int
  dateCreated            DateTime              @default(now())
  reimbursementRequestId String
  reimbursementRequest   Reimbursement_Request @relation(fields: [reimbursementRequestId], references: [reimbursementRequestId])
}

model Reimbursement_Request {
  reimbursementRequestId String                  @id @default(uuid())
  identifier             Int                     @unique @default(autoincrement())
  saboId                 Int?                    @unique
  dateCreated            DateTime                @default(now())
  dateDeleted            DateTime?
  dateOfExpense          DateTime
  reimbursementStatuses  Reimbursement_Status[]
  recipientId            Int
  recipient              User                    @relation(name: "reimbursementRequestRecipient", fields: [recipientId], references: [userId])
  vendorId               String
  vendor                 Vendor                  @relation(fields: [vendorId], references: [vendorId])
  account                Club_Accounts
  totalCost              Int
  receiptPictures        Receipt[]
  reimbursementProducts  Reimbursement_Product[]
  dateDelivered          DateTime?
  expenseTypeId          String
  expenseType            Expense_Type            @relation(fields: [expenseTypeId], references: [expenseTypeId])
}

enum Other_Reimbursement_Product_Reason {
  TOOLS_AND_EQUIPMENT
  COMPETITION
  CONSUMABLES
  GENERAL_STOCK
  SUBSCRIPTIONS_AND_MEMBERSHIPS
}

model Reimbursement_Product_Reason {
  reimbursementProductReasonId String                              @id @default(uuid())
  wbsElementId                 Int?
  wbsElement                   WBS_Element?                        @relation(fields: [wbsElementId], references: [wbsElementId])
  otherReason                  Other_Reimbursement_Product_Reason?
  reimbursementProduct         Reimbursement_Product?
}

model Reimbursement_Product {
  reimbursementProductId       String                       @id @default(uuid())
  name                         String
  dateDeleted                  DateTime?
  cost                         Int
  reimbursementProductReasonId String                       @unique
  reimbursementProductReason   Reimbursement_Product_Reason @relation(fields: [reimbursementProductReasonId], references: [reimbursementProductReasonId])
  reimbursementRequestId       String
  reimbursementRequest         Reimbursement_Request        @relation(fields: [reimbursementRequestId], references: [reimbursementRequestId])
}

model Vendor {
  vendorId    String                  @id @default(uuid())
  dateCreated DateTime                @default(now())
  dateDeleted DateTime?
  name        String                  @unique
  requests    Reimbursement_Request[]
}

model Expense_Type {
  expenseTypeId        String                  @id @default(uuid())
  name                 String
  code                 Int
  allowed              Boolean
  allowedRefundSources Club_Accounts[]
  requests             Reimbursement_Request[]
  dateDeleted          DateTime?
}

model Reimbursement {
  reimbursementId String   @id @default(uuid())
  dateCreated     DateTime @default(now())
  amount          Int
  userSubmittedId Int
  userSubmitted   User     @relation(fields: [userSubmittedId], references: [userId], name: "submitter")
  purchaserId     Int
  purchaser       User     @relation(fields: [purchaserId], references: [userId], name: "purchaser")
}

model User_Secure_Settings {
  userSecureSettingsId String @id @default(uuid())
  nuid                 String @unique
  userId               Int    @unique
  user                 User   @relation(fields: [userId], references: [userId])
  street               String
  city                 String
  state                String
  zipcode              String
  phoneNumber          String @unique
}

enum Material_Status {
  RECEIVED
  ORDERED
  SHIPPED
  NOT_READY_TO_ORDER
  READY_TO_ORDER
}

model Unit {
  name      String     @id
  materials Material[]
}

model Assembly {
  assemblyId    String      @id @default(uuid())
  name          String
  pdmFileName   String?
  dateDeleted   DateTime?
  userDeleted   User?       @relation(fields: [userDeletedId], references: [userId], name: "assemblyDeleter")
  userDeletedId Int?
  dateCreated   DateTime
  userCreated   User        @relation(fields: [userCreatedId], references: [userId], name: "assemblyCreator")
  userCreatedId Int
  wbsElement    WBS_Element @relation(fields: [wbsElementId], references: [wbsElementId])
  wbsElementId  Int
  materials     Material[]
}

model Material {
  materialId             String          @id @default(uuid())
  assembly               Assembly?       @relation(fields: [assemblyId], references: [assemblyId])
  assemblyId             String?
  name                   String
  wbsElement             WBS_Element     @relation(fields: [wbsElementId], references: [wbsElementId])
  wbsElementId           Int
  dateDeleted            DateTime?
  userDeleted            User?           @relation(fields: [userDeletedId], references: [userId], name: "materialDeleter")
  userDeletedId          Int?
  dateCreated            DateTime
  userCreated            User            @relation(fields: [userCreatedId], references: [userId], name: "materialCreator")
  userCreatedId          Int
  status                 Material_Status
  materialType           Material_Type   @relation(fields: [materialTypeName], references: [name])
  materialTypeName       String
  manufacturer           Manufacturer    @relation(fields: [manufacturerName], references: [name])
  manufacturerName       String
  manufacturerPartNumber String
  pdmFileName            String?
  quantity               Decimal
  quantityUnit           Unit?           @relation(fields: [unitName], references: [name])
  unitName               String?
  price                  Int
  subtotal               Int
  linkUrl                String
  notes                  String?
}

model Material_Type {
  name          String     @id
  dateCreated   DateTime
  dateDeleted   DateTime?
  userCreatedId Int
  userCreated   User       @relation(name: "materialTypeCreator", fields: [userCreatedId], references: [userId])
  materials     Material[]
}

model Manufacturer {
  name          String     @id
  dateCreated   DateTime
  dateDeleted   DateTime?
  userCreatedId Int
  userCreated   User       @relation(name: "manufacturerCreator", fields: [userCreatedId], references: [userId])
  materials     Material[]
}

enum Design_Review_Status {
  UNCONFIRMED
  CONFIRMED
  SCHEDULED
  DONE
}

model TeamType {
  teamTypeId     String          @id @default(uuid())
  name           String          @unique
  iconName       String
  Design_Reviews Design_Review[]
  Team           Team[]
}

model Design_Review {
  designReviewId           String               @id @default(uuid())
  dateScheduled            DateTime             @db.Date
  // Meeting times are an integer between 0 and 83 from 10am - 10pm (Monday - Sunday), eg. 0 = 10:00am Monday, 12 = 10:00am Tuesday
  meetingTimes             Int[]
  dateCreated              DateTime             @default(now()) @db.Timestamp(3)
  userCreated              User                 @relation(fields: [userCreatedId], references: [userId], name: "designReviewCreator")
  userCreatedId            Int
  status                   Design_Review_Status
  teamType                 TeamType             @relation(fields: [teamTypeId], references: [teamTypeId])
  teamTypeId               String
  requiredMembers          User[]               @relation(name: "requiredAttendee")
  optionalMembers          User[]               @relation(name: "optionalAttendee")
  confirmedMembers         User[]               @relation(name: "confirmedAttendee")
  deniedMembers            User[]               @relation(name: "deniedAttendee")
  location                 String?
  isOnline                 Boolean
  isInPerson               Boolean
  zoomLink                 String?
  attendees                User[]               @relation(name: "userAttended")
  dateDeleted              DateTime?            @db.Timestamp(3)
  userDeleted              User?                @relation(fields: [userDeletedId], references: [userId], name: "designReviewDeleter")
  userDeletedId            Int?
  docTemplateLink          String?
  wbsElementId             Int
  wbsElement               WBS_Element          @relation(fields: [wbsElementId], references: [wbsElementId])
  notificationSlackThreads Message_Info[]
}

model Schedule_Settings {
  drScheduleSettingsId String @id @default(uuid())
  personalGmail        String
  personalZoomLink     String
  // Availibilies are integers between 0 and 83 from 10am - 10pm (Monday - Sunday) see meetingTime field in Design_Review
  availability         Int[]
  User                 User   @relation(fields: [userId], references: [userId])
  userId               Int    @unique
}

model Meeting {
  meetingId    String @id @default(uuid())
  title        String
  // meetingTimes are integers between 0 and 83 representing time after from 10am - 10pm (from Monday - Sunday) see meetingTime field in Design_Review
  meetingTimes Int[]
  team         Team?  @relation(fields: [teamId], references: [teamId])
  teamId       String
}

model Wbs_Proposed_Changes {
  wbsProposedChangesId          String                         @id @default(uuid())
  name                          String
  status                        WBS_Element_Status
  leadId                        Int?
  lead                          User?                          @relation(name: "wbsProjectLead", fields: [leadId], references: [userId])
  managerId                     Int?
  manager                       User?                          @relation(name: "wbsProjectManager", fields: [managerId], references: [userId])
  links                         Link[]                         @relation(name: "proposedChangeLinks")
  changeRequest                 Scope_CR?                      @relation(name: "wbsProposedChanges", fields: [changeRequestId], references: [scopeCrId])
  changeRequestId               Int?                           @unique
  projectProposedChanges        Project_Proposed_Changes?      @relation(name: "projectProposedChanges")
  workPackageProposedChanges    Work_Package_Proposed_Changes? @relation(name: "wpProposedChanges")
  dateDeleted                   DateTime?
  changeRequestAsOriginalData   Scope_CR?                      @relation(name: "wbsOriginalData", fields: [changeRequestAsOriginalDataId], references: [scopeCrId])
  changeRequestAsOriginalDataId Int?                           @unique
}

model Project_Proposed_Changes {
  projectProposedChangesId String               @id @default(uuid())
  budget                   Int
  summary                  String
  rules                    String[]
  goals                    Description_Bullet[] @relation(name: "proposedProjectGoals")
  features                 Description_Bullet[] @relation(name: "proposedProjectFeatures")
  otherConstraints         Description_Bullet[] @relation(name: "proposedProjectOtherConstraints")
  teams                    Team[]               @relation(name: "proposedProjectTeams")
  wbsProposedChanges       Wbs_Proposed_Changes @relation(name: "projectProposedChanges", fields: [wbsProposedChangesId], references: [wbsProposedChangesId])
  wbsProposedChangesId     String               @unique
  carNumber                Int?
}

model Work_Package_Proposed_Changes {
  workPackageProposedChangesId String               @id @default(uuid())
  startDate                    DateTime             @db.Date
  duration                     Int
  blockedBy                    WBS_Element[]        @relation(name: "proposedBlockedBy")
  expectedActivities           Description_Bullet[] @relation(name: "workPackageExpectedActivities")
  deliverables                 Description_Bullet[] @relation(name: "workPackageDeliverables")
  stage                        Work_Package_Stage?
  wbsProposedChanges           Wbs_Proposed_Changes @relation(name: "wpProposedChanges", fields: [wbsProposedChangesId], references: [wbsProposedChangesId])
  wbsProposedChangesId         String               @unique
}

model Blocked_By_Info {
  blockedByInfoId       String                @id @default(uuid())
  stage                 Work_Package_Stage?
  name                  String
  workPackageTemplate   Work_Package_Template @relation(fields: [workPackageTemplateId], references: [workPackageTemplateId])
  workPackageTemplateId String
}

model Work_Package_Template {
  workPackageTemplateId String              @id @default(uuid())
  templateName          String
  templateNotes         String
  workPackageName       String?
  stage                 Work_Package_Stage?
  duration              Int?
  blockedBy             Blocked_By_Info[]
  expectedActivities    String[]
  deliverables          String[]
  dateCreated           DateTime
  userCreated           User                @relation(fields: [userCreatedId], references: [userId], name: "workPackageTemplateCreator")
  userCreatedId         Int
  dateDeleted           DateTime?
  userDeleted           User?               @relation(fields: [userDeletedId], references: [userId], name: "workPackageTemplateDeleter")
  userDeletedId         Int?
}
